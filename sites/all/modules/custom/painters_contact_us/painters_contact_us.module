<?php
/**
 * @file
 * Contact us page code
 */

define('PAINTERS_CONTACT_US_URL', 'advice/contact-us');
define('PAINTERS_CONTACT_US_THANKU_URL', 'advice/contact-us/thankyou');

/**
 * Implementation of hook_menu
 */
function painters_contact_us_menu() {
  $items [PAINTERS_CONTACT_US_URL] = array(
    'title' => painters_utils_get_label('contactus_page_title_label'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'painters_contact_us_form'
    ),
    'access callback' => TRUE
  );
  $items [PAINTERS_CONTACT_US_THANKU_URL] = array(
    'title' => painters_utils_get_label( 'contactus_page_title_label' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'painters_contact_us_thank_form'
    ),
    'access callback' => TRUE
  );
  return $items;
}

/**
 * Stub implementation for painters_core_theme().
 */
function painters_contact_us_theme(&$existing, $type, $theme, $path) {
  $hooks = array(
    'contact_us_page' => array(
      'render element' => 'form',
      'template' => 'contact-us-page'
    ),
    'inpage_search_visit_us' => array(
      'variables' => array(
        'contact_us_block' => '',
        'labels' => array()
      )
    )
  );
  return $hooks;
}

/**
 * Implemenation of _painters_contact_us
 */
function _painters_contact_us() {
  $output = '';
  $contact_detail_array = array();
  // Get the bean block for the contact us address
  // Get the contact us form
  $contactus_form = drupal_get_form('painters_contact_us_form');
  // $output .= drupal_render($contactus_form);
  // $output .= theme('contact_us_page',array('form' => $contactus_form, 'entity_block' => $contact_entity_block));
  return render($contactus_form);
}

/**
 *
 * @param <type> $variables
 */
function painters_contact_us_preprocess_contact_us_page(&$variables) {
  // Shorten the form variable name for easier access.
  $form = &$variables ['form'];

  // Create variables for individual elements.
  $variables ['audience'] = render( $form ['audience'] );
  hide( $form ['audience'] );

  $variables ['request_type'] = render( $form ['request_type'] );
  hide( $form ['request_type'] );

  $variables ['brands'] = render( $form ['brands'] );
  hide( $form ['brands'] );

  $variables ['entity_block'] = render( $form ['entity_block'] );

  $variables ['js_equalheight'] = '';
  $variables ['js_equalheight_item'] = '';
  $variables ['form_container_classes'] = '';
  if (! isset( $form ['email_address'] )) {
    $variables ['js_equalheight'] = 'js-equalheight';
    $variables ['js_equalheight_item'] = 'js-equalheight-item';
    $variables ['form_container_classes'] = 'contact-info vertical-bottom';
  }
  $variables ['html_markup'] = render( $form ['html_markup'] );
  if (empty( $form ['html_markup'] ['#markup'] )) {
    $variables ['page_type'] = 'form';
  }
  else {
    $variables ['page_type'] = 'thank you';
  }
  hide( $form ['entity_block'] );
  // Be sure to print the remaining rendered form items.
  $variables ['children'] = drupal_render_children( $form );
}

/**
 * Implementation of hook_preprocess_node()
 * Attaching visit us form block & contact us entity bean block alongwith brand
 * node.
 *
 * @param <type> $variables
 */
function painters_contact_us_preprocess_node(&$variables) {
  $node = $variables ['node'];

  // Contact-us bean block
  $bean = entity_load( 'bean', array(
    'contact-us'
  ) );
  $bean_key = key( $bean );
  if (isset( $bean [$bean_key] )) {
    $bean_entity = $bean [$bean_key];
    $field_bean_body_text = _painters_language_field( $bean_entity, 'field_bean_body_text' );
    if (empty( $field_bean_body_text ) && isset( $bean_entity->field_bean_body_text ['en'] )) {
      $field_bean_body_text = $bean_entity->field_bean_body_text ['en'];
    }
    $labels = array(
      'visit_us' => painters_utils_get_label( 'contactus_visit_us' ),
      'placeholder' => painters_utils_get_label( 'contactus_visit_us_placeholder' )
    );
    $variables ['section2_contact_us'] = theme( 'inpage_search_visit_us', array(
      'contact_us_block' => $field_bean_body_text [0] ['safe_value'],
      'labels' => $labels,
      'path' => url('store-locator'),
    ) );
  }
}

/**
 * Implementation of painters_contact_us_form
 */
function painters_contact_us_form($form, &$form_state) {
  $form['#submit'] = array(
    'painters_contact_us_form_submit'
  );
  if (isset($form_state['clicked_button']) && !form_get_errors()) {
    // Execute form submit handlers.
    form_execute_handlers('submit', $form, $form_state);
  }
  $contact_entity_block = _get_contact_entity_block();
  // Get the audience list
  $audience_list = _get_painters_audience_list();
  // Get the Support category
  $request_type_list = _get_painters_request_type_list();
  $request_terms = array();
  $brands_list = _get_painter_brands();
  foreach ($request_type_list as $key => $value) {
      $request_terms[$value['id']] = $value['name'];
    }
    // Get the list of brands
  // Salutions options
  $salutions_array = array(
    'sir' => painters_utils_get_label('contactus_form_sir_label'),
    'madam' => painters_utils_get_label('contactus_form_madam_label')
  );

  // Audience List
  $form['entity_block'] = array(
    '#type' => 'markup',
    '#markup' => $contact_entity_block
  );

  // Audience List
  $form['audience'] = array(
    '#type' => 'select',
    '#title' => painters_utils_get_label('contactus_header_iam_label'),
    '#attributes' => array(
      'item_class' => array(
        'selectbox'
      )
    ),
    '#options' => $audience_list,
    '#description' => ""
  );
  // Request Type
  $form['request_type'] = array(
    '#type' => 'select',
    '#attributes' => array(
      'item_class' => array(
        'selectbox'
      )
    ),
    '#title' => painters_utils_get_label('contactus_header_needof_label'),
    '#options' => $request_terms,
    '#description' => ''
  );
  // Showing brand options only for multi brands market
  if(count($brands_list) > 1) {
  	$form['brands'] = array(
      '#type' => 'select',
      '#title' => painters_utils_get_label('contactus_header_from_label'),
      '#attributes' => array(
        'item_class' => array(
          'selectbox'
        )
       ),
      '#options' => $brands_list,
      '#description' => ''
      );
  }
  // Salutions
  $form['salutions'] = array(
    '#type' => 'radios',
    '#title' => painters_utils_get_label('contactus_form_salutions_label'),
    '#hide_wrapper' => TRUE,
    '#prefix' => '<div class="form-group">',
    '#suffix' => '</div>',
    '#hide_for' => TRUE,
    '#options' => $salutions_array,
    '#description' => '',
    '#default_value' => 'sir'
  );
  // Last Name
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => painters_utils_get_label('contactus_form_last_name_label'),
    '#default_value' => '',
    '#attributes' => array(
      'item_class' => array(
        'form-group',
        'required'
      ),
      'data-required-error' => painters_utils_get_label('contactus_form_last_name_error_label'),
      'required' => TRUE
    ),
    '#help' => '<div class="help-block with-errors"></div>',
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE
  );
  // Email Address
  $form['email_address'] = array(
    '#type' => 'textfield',
    '#title' => painters_utils_get_label('contactus_form_email_address_label'),
    '#default_value' => '',
    '#attributes' => array(
      'item_class' => array(
        'form-group',
        'required'
      ),
      'data-required-error' => painters_utils_get_label('contactus_form_email_address_error_label'),
      'required' => TRUE,
      'type' => 'email',
      'pattern' => '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$',
      'data-error' => t("Please enter a valid email address")
    ),
    '#help' => '<div class="help-block with-errors"></div>',
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE
  );
  // Telephone
  $form['telephone'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'item_class' => array(
        'form-group'
      ),
      'type' => 'tel',
      'pattern' => '^[0-9 )(+-]+$',
      'data-error' => painters_utils_get_label('contactus_form_telephone_number_error_label')
    ),
    '#help' => '<div class="help-block with-errors"></div>',
    '#title' => painters_utils_get_label('contactus_form_telephone_number_label'),
    '#default_value' => '',
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE
  );
  // Message
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => painters_utils_get_label('contactus_form_message_label'),
    '#attributes' => array(
      'item_class' => array(
        'form-group',
        'required'
      ),
      'data-required-error' => painters_utils_get_label('contactus_form_message_error_label'),
      'required' => TRUE
    ),
    '#help' => '<div class="help-block with-errors"></div>',
    '#default_value' => '',
    '#required' => TRUE
  );
  // Submit Button
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => painters_utils_get_label('contactus_form_send_label'),
    '#attributes' => array(
      'class' => array(
        'button-content btn-ripple'
      )
    )
  );
  $form['#attributes'] = array(
    'data-toggle' => 'validator',
    'class' => array(
      'js-form-validate'
    )
  );
  $form['html_markup'] = array(
    '#markup' => ''
  );
  $form['#theme'] = 'contact_us_page';
  return $form;
}

function painters_contact_us_form_validate($form, &$form_state) {}

function painters_contact_us_form_submit($form, &$form_state) {
  // Get the form values
  $audience = filter_xss($form_state['values']['audience']);
  $request_type = filter_xss($form_state['values']['request_type']);
  $brand = filter_xss($form_state['values']['brands']);
  $salutions = filter_xss($form_state['values']['salutions']);
  $last_name = filter_xss($form_state['values']['last_name']);
  $email_address = filter_xss($form_state['values']['email_address']);
  $telephone = filter_xss($form_state['values']['telephone']);

  $contact_vocabulary = taxonomy_vocabulary_machine_name_load('contact_us_request_type');
  $request_type_tree = taxonomy_get_tree($contact_vocabulary->vid);
  $request_type_list = _get_painters_request_type_list();
  $category_id = 'others';
  foreach ($request_type_list as $key => $value) {
    if ($value['id'] == $request_type) {
      $category_id = $value['id'];
    }
  }
  $options = array();
  foreach ($request_type_tree as $key => $value) {
    $term_content = taxonomy_term_load($value->tid);
    $options[] = array(
      "optionDesc" => $value->name,
      "id" => $term_content->field_category_id['und'][0]['value']
    );
  }

  $message = '';
  // Format the missing fields into the message
  $message .= "Audience type: " . $audience . "<br>";
  $message .= "Request type: " . $request_type . "<br>";
  $message .= "Brand: " . $brand . "<br>";
  $message .= "Salutions: " . $salutions . "<br>";
  $message .= "Last name: " . $last_name . "<br>";
  $message .= "Email address: " . $email_address . "<br>";
  $message .= "Telephone: " . $telephone . "<br>";

  $message .= "Message: " . filter_xss($form_state['values']['message']) . "<br>";

  // Submit data to SantaMaria API. Get the API and the endpoint details for the Survey APi
  $api_base_url = variable_get('santa_maria_api');
  $end_point = 'api/surveys';

  // Construct the Data
  $data = array(
    "formName" => 'contactus-form',
    "formVersion" => 1,
    "siteCode" => variable_get('santa_maria_api_domain_code'),
    "language" => platform_sm_integration_get_language_code(),
    "formData" => array(
      array(
        "id" => "lastName",
        "desc" => "Last Name",
        "type" => "text",
        "values" => array(
          $last_name
        )
      ),
      array(
        "id" => "email",
        "desc" => "Email",
        "type" => "text",
        "values" => array(
          $email_address
        )
      ),
      array(
        "id" => "telephone",
        "desc" => "Telephone",
        "type" => "text",
        "values" => array(
          $telephone
        )
      ),
      array(
        "id" => "query",
        "desc" => "Your message",
        "type" => "text",
        "values" => array(
          $message
        )
      ),
      array(
        "id" => "reason",
        "desc" => "Your reason for contacting us",
        "type" => "select",
        "options" => $options,
        "values" => array(
          $category_id
        )
      )
    )
  );

  $url = $api_base_url . $end_point;

  $response = drupal_http_request($url, array(
    'method' => 'POST',
    'data' => (!empty($data)) ? json_encode($data) : '',
    'max_redirects' => 0,
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => 'application/json',
      'X-API-Key' => variable_get('santa_maria_api_key')
    )
  ));

  if ($response->code == '201' && $response->status_message == 'Created') {
    watchdog('contact-us-survey', 'Contact-Us - RESPONSE' . '<pre>' . print_r($response, TRUE) . '</pre>');

    // Redirect to thank you page after submitting the contact us page.
    drupal_goto(PAINTERS_CONTACT_US_THANKU_URL, array(
      'query' => array(
        'audience' => $form_state['values']['audience'],
        'request' => $form_state['values']['request_type'],
        'brand' => $form_state['values']['brands']
      )
    ));
  }
  else {
    drupal_set_message(painters_utils_get_label('contactus_form_submit_validation_label'), 'error');
  }
}

/*
 * Implementation of thank you page message from
 */
function painters_contact_us_thank_form($form, &$form_state) {
	$brands_list = _get_painter_brands();
	$contact_entity_block = _get_contact_entity_block ();
	// Get the audience list
	$audience_list = _get_painters_audience_list ();

	// Get the Support category
	$request_type_list = _get_painters_request_type_list ();
	// Support category values for drop down
  $request_type_list_values = array();
  foreach($request_type_list as $key => $value) {
    $request_type_list_values[$value['name']] = $value['name'];
  }
	// Get the list of brands
	// Set the default value for the audience type, request type & brands.
	$default_audience = isset ( $_GET ['audience'] ) ? array (
			$_GET ['audience'] => $_GET ['audience']
	) : NULL;
	$default_request = isset ( $_GET ['request'] ) ? array (
			$_GET ['request'] => $_GET ['request']
	) : NULL;
	$default_brand = isset ( $_GET ['brand'] ) ? array (
			$_GET ['brand'] => $_GET ['brand']
	) : NULL;

	// Audience List
	$form ['entity_block'] = array (
			'#type' => 'markup',
			'#markup' => $contact_entity_block
	);
	// Audience List
	$form ['audience'] = array (
			'#type' => 'select',
			'#title' => painters_utils_get_label ( 'contactus_header_iam_label' ),
			'#attributes' => array (
					'item_class' => array (
							'selectbox'
					)
			),
			'#options' => $audience_list,
			'#default_value' => $default_audience
	);
	// Request Type
	$form ['request_type'] = array (
			'#type' => 'select',
			'#attributes' => array (
					'item_class' => array (
							'selectbox'
					)
			),
			'#title' => painters_utils_get_label ( 'contactus_header_needof_label' ),
			'#options' => $request_type_list_values,
			'#default_value' => $default_request,
			'#description' => ''
	);
	// Showing brand options only for multi brands market
	if(count($brands_list) > 1) {
	  $form ['brands'] = array (
        '#type' => 'select',
        '#title' => painters_utils_get_label ( 'contactus_header_from_label' ),
        '#attributes' => array (
          'item_class' => array (
            'selectbox'
          )
        ),
		'#options' => $brands_list,
        '#default_value' => $default_brand,
        '#description' => ''
		);
  }

	$form ['html_markup'] = array (
			'#markup' => '<h3>' . painters_utils_get_label ( 'contactus_form_thankyou_label' ) . '</h3>' . painters_utils_get_label ( 'contactus_form_thankyou_message_label' )
	);
	$form ['#theme'] = 'contact_us_page';
	return $form;
}

/**
 * Implementation of _get_painters_audience_list
 */
function _get_painters_audience_list() {
  // Get the vocabularyID for the color tools audience
  $audience_voc = taxonomy_vocabulary_machine_name_load('color_tools_audience_');
  // Get the ist of terms for the color tools audience
  $audience_term_tree = taxonomy_get_tree($audience_voc->vid);
  $audience_list = array();
  foreach ($audience_term_tree as $term) {
    $localized_term = i18n_taxonomy_localize_terms(taxonomy_term_load($term->tid));
    $audience_list[$term->name] = $localized_term->name;
  }
  return $audience_list;
}

/**
 * Implementation of _get_painters_request_type_list
 */
function _get_painters_request_type_list() {
  // Get the vocabularyID for the request type
  $request_type_voc = taxonomy_vocabulary_machine_name_load('contact_us_request_type');

  // Get the ist of terms for the color tools audience
  $request_typ_tree = taxonomy_get_tree($request_type_voc->vid);
  $request_typ_list = array();
  foreach ($request_typ_tree as $term) {
    $term_content = taxonomy_term_load($term->tid);
    $localized_term = i18n_taxonomy_localize_terms($term_content);
    $request_typ_list[$term->name]['name'] = $localized_term->name;
    $request_typ_list[$term->name]['id'] = $term_content->field_category_id['und'][0]['value'];
  }
  return $request_typ_list;
}

/**
 * Implementation of _get_painter_brands
 */
function _get_painter_brands() {
  $brands_list = array();
  $brands_query = db_query("SELECT title FROM {node} WHERE type = :TYPE AND status = 1", array(
    ":TYPE" => 'brand'
  ))->fetchAll();

  foreach ($brands_query as $value) {
    $brands_list[$value->title] = $value->title;
  }
  return $brands_list;
}

/**
 * Implementation of _get_contact_entity_block
 */
function _get_contact_entity_block() {
  // Get the entity block data for contact us entity block
  $entity_block_data = db_query("SELECT field_bean_body_text_value FROM {field_data_field_bean_body_text} fb,
	{ bean }
    b WHERE fb.entity_id = b.bid AND b.delta = :DELTA ", array(
    ":DELTA" => 'contactus-address-block'
  ))->fetchField();

  return $entity_block_data;
}

/**
 * Return Taxonomy tree for a vocabularyID & language
 */
function _get_painters_taxonomy_get_tree($vid, $language_code = FALSE) {
  if (!isset($language_code) && empty($language_code)) {
    global $language;
    $language_code = $language->language;
  }
  // Get the list of terms for the vocabularyID
  if (module_exists('i18n_taxonomy')) { // Check if the module exists
    $request_typ_tree = i18n_taxonomy_get_tree($vid, $language_code, 0, NULL, FALSE);
  }
  else {
    $request_typ_tree = taxonomy_get_tree($vid);
  }
  return $request_typ_tree;
}